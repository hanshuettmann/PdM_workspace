
Tp_SpiAds1293.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003160  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033fc  080033fc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003404  08003404  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800340c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
 10 .bss          000000cc  2000003c  2000003c  0002003c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  0002003c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef0f  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021af  00000000  00000000  0002ef7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  00031130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000940  00000000  00000000  00031b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c4d  00000000  00000000  00032498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f70b  00000000  00000000  000590e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4659  00000000  00000000  000687f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014ce49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000275c  00000000  00000000  0014ce9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000003c 	.word	0x2000003c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080032f4 	.word	0x080032f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000040 	.word	0x20000040
 80001e8:	080032f4 	.word	0x080032f4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <debounceFSM_init>:
/**
 * @brief  Initialize Debounce Finite State Machine FSM
 * @param  none
 * @retval None
 */
void debounceFSM_init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* Initialize User Button */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80004f8:	2100      	movs	r1, #0
 80004fa:	2000      	movs	r0, #0
 80004fc:	f000 fa1a 	bl	8000934 <BSP_PB_Init>

	currentState = BUTTON_UP;
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <debounceFSM_init+0x1c>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
	buttonPressed = false;
 8000506:	4b03      	ldr	r3, [pc, #12]	; (8000514 <debounceFSM_init+0x20>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000058 	.word	0x20000058
 8000514:	20000059 	.word	0x20000059

08000518 <debounceFSM_update>:
/**
 * @brief  Read entries and update FSM state and pressed status
 * @param  none
 * @retval None
 */
void debounceFSM_update(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	/* Initialize delay_t handler */
	static delay_t debounceDelay;

	switch (currentState) {
 800051c:	4b37      	ldr	r3, [pc, #220]	; (80005fc <debounceFSM_update+0xe4>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b03      	cmp	r3, #3
 8000522:	d85f      	bhi.n	80005e4 <debounceFSM_update+0xcc>
 8000524:	a201      	add	r2, pc, #4	; (adr r2, 800052c <debounceFSM_update+0x14>)
 8000526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052a:	bf00      	nop
 800052c:	0800053d 	.word	0x0800053d
 8000530:	08000563 	.word	0x08000563
 8000534:	080005b7 	.word	0x080005b7
 8000538:	08000591 	.word	0x08000591
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)) {
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fa4f 	bl	80009e0 <BSP_PB_GetState>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d050      	beq.n	80005ea <debounceFSM_update+0xd2>
			currentState = BUTTON_FALLING;
 8000548:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <debounceFSM_update+0xe4>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
			if (delayInit(&debounceDelay, DEBOUNCE_DELAY) != DELAY_OK)
 800054e:	2128      	movs	r1, #40	; 0x28
 8000550:	482b      	ldr	r0, [pc, #172]	; (8000600 <debounceFSM_update+0xe8>)
 8000552:	f000 f863 	bl	800061c <delayInit>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d046      	beq.n	80005ea <debounceFSM_update+0xd2>
				Error_Handler();
 800055c:	f000 f854 	bl	8000608 <Error_Handler>
		}
		break;
 8000560:	e043      	b.n	80005ea <debounceFSM_update+0xd2>

	case BUTTON_FALLING:
		if (delayRead(&debounceDelay)) {
 8000562:	4827      	ldr	r0, [pc, #156]	; (8000600 <debounceFSM_update+0xe8>)
 8000564:	f000 f874 	bl	8000650 <delayRead>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d03f      	beq.n	80005ee <debounceFSM_update+0xd6>
			if (BSP_PB_GetState(BUTTON_USER)) {
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fa36 	bl	80009e0 <BSP_PB_GetState>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d006      	beq.n	8000588 <debounceFSM_update+0x70>
				currentState = BUTTON_DOWN;
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <debounceFSM_update+0xe4>)
 800057c:	2203      	movs	r2, #3
 800057e:	701a      	strb	r2, [r3, #0]
				buttonPressed = true;
 8000580:	4b20      	ldr	r3, [pc, #128]	; (8000604 <debounceFSM_update+0xec>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
			} else {
				currentState = BUTTON_UP;
			}
		}
		break;
 8000586:	e032      	b.n	80005ee <debounceFSM_update+0xd6>
				currentState = BUTTON_UP;
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <debounceFSM_update+0xe4>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
		break;
 800058e:	e02e      	b.n	80005ee <debounceFSM_update+0xd6>

	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)) {
 8000590:	2000      	movs	r0, #0
 8000592:	f000 fa25 	bl	80009e0 <BSP_PB_GetState>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d12a      	bne.n	80005f2 <debounceFSM_update+0xda>
			currentState = BUTTON_RISING;
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <debounceFSM_update+0xe4>)
 800059e:	2202      	movs	r2, #2
 80005a0:	701a      	strb	r2, [r3, #0]
			if (delayInit(&debounceDelay, DEBOUNCE_DELAY) != DELAY_OK)
 80005a2:	2128      	movs	r1, #40	; 0x28
 80005a4:	4816      	ldr	r0, [pc, #88]	; (8000600 <debounceFSM_update+0xe8>)
 80005a6:	f000 f839 	bl	800061c <delayInit>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d020      	beq.n	80005f2 <debounceFSM_update+0xda>
				Error_Handler();
 80005b0:	f000 f82a 	bl	8000608 <Error_Handler>
		}
		break;
 80005b4:	e01d      	b.n	80005f2 <debounceFSM_update+0xda>

	case BUTTON_RISING:
		if (delayRead(&debounceDelay)) {
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <debounceFSM_update+0xe8>)
 80005b8:	f000 f84a 	bl	8000650 <delayRead>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d019      	beq.n	80005f6 <debounceFSM_update+0xde>
			if (!BSP_PB_GetState(BUTTON_USER)) {
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fa0c 	bl	80009e0 <BSP_PB_GetState>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <debounceFSM_update+0xc4>
				currentState = BUTTON_UP;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <debounceFSM_update+0xe4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
				buttonPressed = false;
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <debounceFSM_update+0xec>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
			} else {
				currentState = BUTTON_DOWN;
			}
		}
		break;
 80005da:	e00c      	b.n	80005f6 <debounceFSM_update+0xde>
				currentState = BUTTON_DOWN;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <debounceFSM_update+0xe4>)
 80005de:	2203      	movs	r2, #3
 80005e0:	701a      	strb	r2, [r3, #0]
		break;
 80005e2:	e008      	b.n	80005f6 <debounceFSM_update+0xde>

	default:
		debounceFSM_init();
 80005e4:	f7ff ff86 	bl	80004f4 <debounceFSM_init>
		break;
 80005e8:	e006      	b.n	80005f8 <debounceFSM_update+0xe0>
		break;
 80005ea:	bf00      	nop
 80005ec:	e004      	b.n	80005f8 <debounceFSM_update+0xe0>
		break;
 80005ee:	bf00      	nop
 80005f0:	e002      	b.n	80005f8 <debounceFSM_update+0xe0>
		break;
 80005f2:	bf00      	nop
 80005f4:	e000      	b.n	80005f8 <debounceFSM_update+0xe0>
		break;
 80005f6:	bf00      	nop
	}
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000058 	.word	0x20000058
 8000600:	2000005c 	.word	0x2000005c
 8000604:	20000059 	.word	0x20000059

08000608 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	/* Toggle LED2 */
	while (1) {
		BSP_LED_Toggle(LED2);
 800060c:	2001      	movs	r0, #1
 800060e:	f000 f977 	bl	8000900 <BSP_LED_Toggle>
		HAL_Delay(500);
 8000612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000616:	f000 fac9 	bl	8000bac <HAL_Delay>
		BSP_LED_Toggle(LED2);
 800061a:	e7f7      	b.n	800060c <Error_Handler+0x4>

0800061c <delayInit>:
 * @param  delay: pointer to a delay_t structure that contains
 *         the corresponding values to use the delay.
 * @param  duration: Timeout value
 * @retval Delay def status
 */
delay_statusTypeDef delayInit(delay_t *delay, tick_t duration) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	//Timeout and pointer validation
	if (delay == 0 || duration < 0) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d101      	bne.n	8000630 <delayInit+0x14>
		return DELAY_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	e00b      	b.n	8000648 <delayInit+0x2c>
	}

	delay->startTime = HAL_GetTick();
 8000630:	f000 fab0 	bl	8000b94 <HAL_GetTick>
 8000634:	4602      	mov	r2, r0
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	721a      	strb	r2, [r3, #8]
	return DELAY_OK;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <delayRead>:
 * @param  delay: pointer to a delay_t structure that contains
 *         the corresponding values to use the delay.
 * @retval Boolean that indicates the state of the delay. True for delay running and false indicating
 * 		   duration time has elapsed
 */
bool_t delayRead(delay_t *delay) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	//Pointer validation
	if (delay == 0) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <delayRead+0x10>
		while(1);
 800065e:	e7fe      	b.n	800065e <delayRead+0xe>
	}

	if (!delay->running) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7a1b      	ldrb	r3, [r3, #8]
 8000664:	f083 0301 	eor.w	r3, r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d007      	beq.n	800067e <delayRead+0x2e>
		delay->startTime = HAL_GetTick();
 800066e:	f000 fa91 	bl	8000b94 <HAL_GetTick>
 8000672:	4602      	mov	r2, r0
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2201      	movs	r2, #1
 800067c:	721a      	strb	r2, [r3, #8]
	}

	if (HAL_GetTick() - delay->startTime > delay->duration) {
 800067e:	f000 fa89 	bl	8000b94 <HAL_GetTick>
 8000682:	4602      	mov	r2, r0
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	1ad2      	subs	r2, r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d904      	bls.n	800069c <delayRead+0x4c>
		delay->running = false;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	721a      	strb	r2, [r3, #8]
		return true;
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <delayRead+0x4e>
	} else {
		return false;
 800069c:	2300      	movs	r3, #0
	}
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <spiInit>:
/**
 * @brief  Initialize SPI peripheral
 * @param  none
 * @retval bool Init process status
 */
bool_t spiInit(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0

	/*##-1- Configure the SPI peripheral ######################################*/
	hspi.Instance = SPI1;
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <spiInit+0xbc>)
 80006b0:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <spiInit+0xc0>)
 80006b2:	601a      	str	r2, [r3, #0]

	hspi.Init.Mode = SPI_MODE_MASTER;
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <spiInit+0xbc>)
 80006b6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ba:	605a      	str	r2, [r3, #4]
	hspi.Init.Direction = SPI_DIRECTION_2LINES;
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <spiInit+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
	hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <spiInit+0xbc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
	hspi.Init.CLKPolarity = SPI_POLARITY_LOW; //CPOL = 0
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <spiInit+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
	hspi.Init.CLKPhase = SPI_PHASE_2EDGE; //CPHA = 1
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <spiInit+0xbc>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	615a      	str	r2, [r3, #20]
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <spiInit+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
	hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <spiInit+0xbc>)
 80006dc:	2228      	movs	r2, #40	; 0x28
 80006de:	61da      	str	r2, [r3, #28]
	hspi.Init.NSS = SPI_NSS_SOFT;
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <spiInit+0xbc>)
 80006e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e6:	619a      	str	r2, [r3, #24]

	HAL_GPIO_WritePin(SPIx_NSS_SOFT_GPIO_PORT, SPIx_NSS_SOFT_PIN, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ee:	481f      	ldr	r0, [pc, #124]	; (800076c <spiInit+0xc4>)
 80006f0:	f000 fd56 	bl	80011a0 <HAL_GPIO_WritePin>

	/* Init peripheral */
	if (HAL_SPI_Init(&hspi) != HAL_OK) {
 80006f4:	481b      	ldr	r0, [pc, #108]	; (8000764 <spiInit+0xbc>)
 80006f6:	f001 fb45 	bl	8001d84 <HAL_SPI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <spiInit+0x5c>
		/* Initialization Error */
		return false;
 8000700:	2300      	movs	r3, #0
 8000702:	e02a      	b.n	800075a <spiInit+0xb2>
	}

	const uint8_t pSend = 0xA1;
 8000704:	23a1      	movs	r3, #161	; 0xa1
 8000706:	75fb      	strb	r3, [r7, #23]
	char pData[20];

	HAL_GPIO_WritePin(SPIx_NSS_SOFT_GPIO_PORT, SPIx_NSS_SOFT_PIN,
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070e:	4817      	ldr	r0, [pc, #92]	; (800076c <spiInit+0xc4>)
 8000710:	f000 fd46 	bl	80011a0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	if (HAL_SPI_Transmit(&hspi, (uint8_t*) &pSend, 1, HAL_MAX_DELAY) != HAL_OK)
 8000714:	f107 0117 	add.w	r1, r7, #23
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	2201      	movs	r2, #1
 800071e:	4811      	ldr	r0, [pc, #68]	; (8000764 <spiInit+0xbc>)
 8000720:	f001 fbc1 	bl	8001ea6 <HAL_SPI_Transmit>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <spiInit+0x86>
		return false;
 800072a:	2300      	movs	r3, #0
 800072c:	e015      	b.n	800075a <spiInit+0xb2>
	if (HAL_SPI_Receive(&hspi, (uint8_t*) pData, 1, HAL_MAX_DELAY) != HAL_OK)
 800072e:	4639      	mov	r1, r7
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	2201      	movs	r2, #1
 8000736:	480b      	ldr	r0, [pc, #44]	; (8000764 <spiInit+0xbc>)
 8000738:	f001 fd13 	bl	8002162 <HAL_SPI_Receive>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <spiInit+0x9e>
		return false;
 8000742:	2300      	movs	r3, #0
 8000744:	e009      	b.n	800075a <spiInit+0xb2>

	HAL_GPIO_WritePin(SPIx_NSS_SOFT_GPIO_PORT, SPIx_NSS_SOFT_PIN, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074c:	4807      	ldr	r0, [pc, #28]	; (800076c <spiInit+0xc4>)
 800074e:	f000 fd27 	bl	80011a0 <HAL_GPIO_WritePin>

	uartSendString((uint8_t*) "SPI finalizado\r\n");
 8000752:	4807      	ldr	r0, [pc, #28]	; (8000770 <spiInit+0xc8>)
 8000754:	f000 f86a 	bl	800082c <uartSendString>

	return true;
 8000758:	2301      	movs	r3, #1
}
 800075a:	4618      	mov	r0, r3
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000068 	.word	0x20000068
 8000768:	40013000 	.word	0x40013000
 800076c:	40020c00 	.word	0x40020c00
 8000770:	0800330c 	.word	0x0800330c

08000774 <uartInit>:
/**
 * @brief  Initialize UART peripheral
 * @param  none
 * @retval bool Init process status
 */
bool_t uartInit(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

	/*##-1- Configure the UART peripheral ######################################*/
	/* Put the USART peripheral in the Asynchronous mode (UART Mode) */
	UartHandle.Instance = USARTx;
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <uartInit+0x94>)
 800077a:	4a24      	ldr	r2, [pc, #144]	; (800080c <uartInit+0x98>)
 800077c:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate = UART_BAUDRATE;
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <uartInit+0x94>)
 8000780:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000784:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH;
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <uartInit+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS;
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <uartInit+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY;
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <uartInit+0x94>)
 8000794:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000798:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_FLOWCONTROL;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <uartInit+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <uartInit+0x94>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <uartInit+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]

	/* Init peripheral */
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 80007ac:	4816      	ldr	r0, [pc, #88]	; (8000808 <uartInit+0x94>)
 80007ae:	f002 f9a5 	bl	8002afc <HAL_UART_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <uartInit+0x48>
		/* Initialization Error */
		return false;
 80007b8:	2300      	movs	r3, #0
 80007ba:	e023      	b.n	8000804 <uartInit+0x90>
	} else {
		uartSendString((uint8_t*) UART_BAUDRATE_MSG);
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <uartInit+0x9c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f833 	bl	800082c <uartSendString>
		uartSendString((uint8_t*) UART_WORDLENGTH_MSG);
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <uartInit+0xa0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f82e 	bl	800082c <uartSendString>
		uartSendString((uint8_t*) UART_STOPBITS_MSG);
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <uartInit+0xa4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f829 	bl	800082c <uartSendString>
		uartSendString((uint8_t*) UART_PARITY_MSG);
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <uartInit+0xa8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f824 	bl	800082c <uartSendString>
		uartSendString((uint8_t*) UART_FLOWCONTROL_MSG);
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <uartInit+0xac>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f81f 	bl	800082c <uartSendString>
		uartSendString((uint8_t*) UART_MODE_MSG);
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <uartInit+0xb0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f81a 	bl	800082c <uartSendString>
		uartSendString((uint8_t*) UART_OVERSAMPLING_MSG);
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <uartInit+0xb4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f815 	bl	800082c <uartSendString>
		return true;
 8000802:	2301      	movs	r3, #1
	}

}
 8000804:	4618      	mov	r0, r3
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000c0 	.word	0x200000c0
 800080c:	40004800 	.word	0x40004800
 8000810:	20000000 	.word	0x20000000
 8000814:	20000004 	.word	0x20000004
 8000818:	20000008 	.word	0x20000008
 800081c:	2000000c 	.word	0x2000000c
 8000820:	20000010 	.word	0x20000010
 8000824:	20000014 	.word	0x20000014
 8000828:	20000018 	.word	0x20000018

0800082c <uartSendString>:
/**
 * @brief  Send string to the console
 * @param  pstring pointer to the array to be sent to the console
 * @retval none
 */
void uartSendString(uint8_t *pstring) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	/* Validates pstring parameter */
	if (pstring == NULL) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00b      	beq.n	8000852 <uartSendString+0x26>
		return;
	}

	/* Send pstring to the console */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) pstring,
			strlen((const char*) pstring), HAL_MAX_DELAY);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff fcd6 	bl	80001ec <strlen>
 8000840:	4603      	mov	r3, r0
	HAL_UART_Transmit(&UartHandle, (uint8_t*) pstring,
 8000842:	b29a      	uxth	r2, r3
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <uartSendString+0x30>)
 800084c:	f002 f9a3 	bl	8002b96 <HAL_UART_Transmit>
 8000850:	e000      	b.n	8000854 <uartSendString+0x28>
		return;
 8000852:	bf00      	nop
}
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000c0 	.word	0x200000c0

08000860 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10e      	bne.n	800088e <BSP_LED_Init+0x2e>
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <BSP_LED_Init+0x94>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <BSP_LED_Init+0x94>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <BSP_LED_Init+0x94>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f003 0302 	and.w	r3, r3, #2
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	e00d      	b.n	80008aa <BSP_LED_Init+0x4a>
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <BSP_LED_Init+0x94>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <BSP_LED_Init+0x94>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <BSP_LED_Init+0x94>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <BSP_LED_Init+0x98>)
 80008ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <BSP_LED_Init+0x9c>)
 80008c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c8:	f107 0214 	add.w	r2, r7, #20
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 faa2 	bl	8000e18 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4a09      	ldr	r2, [pc, #36]	; (80008fc <BSP_LED_Init+0x9c>)
 80008d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <BSP_LED_Init+0x98>)
 80008e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e4:	2200      	movs	r2, #0
 80008e6:	4619      	mov	r1, r3
 80008e8:	f000 fc5a 	bl	80011a0 <HAL_GPIO_WritePin>
}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	080033dc 	.word	0x080033dc
 80008fc:	2000001c 	.word	0x2000001c

08000900 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <BSP_LED_Toggle+0x2c>)
 800090e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <BSP_LED_Toggle+0x30>)
 8000916:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800091a:	4619      	mov	r1, r3
 800091c:	4610      	mov	r0, r2
 800091e:	f000 fc58 	bl	80011d2 <HAL_GPIO_TogglePin>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000001c 	.word	0x2000001c
 8000930:	080033dc 	.word	0x080033dc

08000934 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	460a      	mov	r2, r1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <BSP_PB_Init+0xa4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a22      	ldr	r2, [pc, #136]	; (80009d8 <BSP_PB_Init+0xa4>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <BSP_PB_Init+0xa4>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d112      	bne.n	800098c <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000970:	2302      	movs	r3, #2
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <BSP_PB_Init+0xa8>)
 800097c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000980:	f107 020c 	add.w	r2, r7, #12
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fa46 	bl	8000e18 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d11d      	bne.n	80009ce <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800099c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <BSP_PB_Init+0xa8>)
 80009a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009aa:	f107 020c 	add.w	r2, r7, #12
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fa31 	bl	8000e18 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80009b6:	2328      	movs	r3, #40	; 0x28
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	2200      	movs	r2, #0
 80009bc:	210f      	movs	r1, #15
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f9f3 	bl	8000daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80009c4:	2328      	movs	r3, #40	; 0x28
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fa0a 	bl	8000de2 <HAL_NVIC_EnableIRQ>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	20000028 	.word	0x20000028

080009e0 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <BSP_PB_GetState+0x28>)
 80009ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fbb9 	bl	8001170 <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000028 	.word	0x20000028

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <SystemInit+0x60>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <SystemInit+0x60>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <SystemInit+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <SystemInit+0x64>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <SystemInit+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SystemInit+0x64>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <SystemInit+0x64>)
 8000a38:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <SystemInit+0x64>)
 8000a44:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <SystemInit+0x68>)
 8000a46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <SystemInit+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <SystemInit+0x64>)
 8000a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SystemInit+0x60>)
 8000a5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a60:	609a      	str	r2, [r3, #8]
#endif
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	40023800 	.word	0x40023800
 8000a74:	24003010 	.word	0x24003010

08000a78 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000acc:	f000 f84e 	bl	8000b6c <HAL_IncTick>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_Init+0x34>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_Init+0x34>)
 8000ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae2:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x34>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x34>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f94f 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f000 fc76 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f967 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f92f 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000002c 	.word	0x2000002c
 8000b64:	20000034 	.word	0x20000034
 8000b68:	20000030 	.word	0x20000030

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000034 	.word	0x20000034
 8000b90:	20000104 	.word	0x20000104

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000104 	.word	0x20000104

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff ffee 	bl	8000b94 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffde 	bl	8000b94 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000034 	.word	0x20000034

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff29 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff3e 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff31 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffa2 	bl	8000d50 <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e177      	b.n	8001124 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8166 	bne.w	800111e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d017      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80c0 	beq.w	800111e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b66      	ldr	r3, [pc, #408]	; (800113c <HAL_GPIO_Init+0x324>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <HAL_GPIO_Init+0x324>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b63      	ldr	r3, [pc, #396]	; (800113c <HAL_GPIO_Init+0x324>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a61      	ldr	r2, [pc, #388]	; (8001140 <HAL_GPIO_Init+0x328>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a58      	ldr	r2, [pc, #352]	; (8001144 <HAL_GPIO_Init+0x32c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d037      	beq.n	8001056 <HAL_GPIO_Init+0x23e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a57      	ldr	r2, [pc, #348]	; (8001148 <HAL_GPIO_Init+0x330>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d031      	beq.n	8001052 <HAL_GPIO_Init+0x23a>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a56      	ldr	r2, [pc, #344]	; (800114c <HAL_GPIO_Init+0x334>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d02b      	beq.n	800104e <HAL_GPIO_Init+0x236>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a55      	ldr	r2, [pc, #340]	; (8001150 <HAL_GPIO_Init+0x338>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x232>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a54      	ldr	r2, [pc, #336]	; (8001154 <HAL_GPIO_Init+0x33c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x22e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a53      	ldr	r2, [pc, #332]	; (8001158 <HAL_GPIO_Init+0x340>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x22a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a52      	ldr	r2, [pc, #328]	; (800115c <HAL_GPIO_Init+0x344>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x226>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a51      	ldr	r2, [pc, #324]	; (8001160 <HAL_GPIO_Init+0x348>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x222>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a50      	ldr	r2, [pc, #320]	; (8001164 <HAL_GPIO_Init+0x34c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x21e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <HAL_GPIO_Init+0x350>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x21a>
 800102e:	2309      	movs	r3, #9
 8001030:	e012      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001032:	230a      	movs	r3, #10
 8001034:	e010      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001036:	2308      	movs	r3, #8
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800103a:	2307      	movs	r3, #7
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x328>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <HAL_GPIO_Init+0x354>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a34      	ldr	r2, [pc, #208]	; (800116c <HAL_GPIO_Init+0x354>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <HAL_GPIO_Init+0x354>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a29      	ldr	r2, [pc, #164]	; (800116c <HAL_GPIO_Init+0x354>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_GPIO_Init+0x354>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_GPIO_Init+0x354>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_GPIO_Init+0x354>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <HAL_GPIO_Init+0x354>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae84 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40021c00 	.word	0x40021c00
 8001164:	40022000 	.word	0x40022000
 8001168:	40022400 	.word	0x40022400
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	400b      	ands	r3, r1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_UART_MspInit>:
 *           - Peripheral's clock enable
 *           - Peripheral's GPIO Configuration
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <HAL_UART_MspInit+0x9c>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <HAL_UART_MspInit+0x9c>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_UART_MspInit+0x9c>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
	USARTx_RX_GPIO_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_UART_MspInit+0x9c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <HAL_UART_MspInit+0x9c>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6313      	str	r3, [r2, #48]	; 0x30
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_UART_MspInit+0x9c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]

	/* Enable USARTx clock */
	USARTx_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_UART_MspInit+0x9c>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <HAL_UART_MspInit+0x9c>)
 8001252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001256:	6413      	str	r3, [r2, #64]	; 0x40
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_UART_MspInit+0x9c>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* UART TX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_TX_PIN;
 8001264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001268:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126e:	2301      	movs	r3, #1
 8001270:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001276:	2307      	movs	r3, #7
 8001278:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <HAL_UART_MspInit+0xa0>)
 8001282:	f7ff fdc9 	bl	8000e18 <HAL_GPIO_Init>

	/* UART RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800128a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800128c:	2307      	movs	r3, #7
 800128e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4804      	ldr	r0, [pc, #16]	; (80012a8 <HAL_UART_MspInit+0xa0>)
 8001298:	f7ff fdbe 	bl	8000e18 <HAL_GPIO_Init>
}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020c00 	.word	0x40020c00

080012ac <HAL_SPI_MspInit>:
 *           - Peripheral's clock enable
 *           - Peripheral's GPIO Configuration
 * @param spi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable SPIx clock */
	SPIx_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	4a48      	ldr	r2, [pc, #288]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 80012be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c2:	6453      	str	r3, [r2, #68]	; 0x44
 80012c4:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	6a3b      	ldr	r3, [r7, #32]

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO SPI clocks */
	SPIx_SCK_GPIO_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	4b42      	ldr	r3, [pc, #264]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a41      	ldr	r2, [pc, #260]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	69fb      	ldr	r3, [r7, #28]
	SPIx_MISO_GPIO_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a3a      	ldr	r2, [pc, #232]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	69bb      	ldr	r3, [r7, #24]
	SPIx_MOSI_GPIO_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a33      	ldr	r2, [pc, #204]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
	SPIx_NSS_GPIO_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6313      	str	r3, [r2, #48]	; 0x30
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
	SPIx_NSS_SOFT_GPIO_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_SPI_MspInit+0x134>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]


	/*##-2- Configure peripheral GPIO ##########################################*/
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 800135c:	2320      	movs	r3, #32
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8001364:	2305      	movs	r3, #5
 8001366:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	481d      	ldr	r0, [pc, #116]	; (80013e4 <HAL_SPI_MspInit+0x138>)
 8001370:	f7ff fd52 	bl	8000e18 <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8001374:	2340      	movs	r3, #64	; 0x40
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 800137c:	2305      	movs	r3, #5
 800137e:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4817      	ldr	r0, [pc, #92]	; (80013e4 <HAL_SPI_MspInit+0x138>)
 8001388:	f7ff fd46 	bl	8000e18 <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8001394:	2305      	movs	r3, #5
 8001396:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <HAL_SPI_MspInit+0x138>)
 80013a0:	f7ff fd3a 	bl	8000e18 <HAL_GPIO_Init>

	/* SPI NSS GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_NSS_PIN;
 80013a4:	2310      	movs	r3, #16
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = SPIx_NSS_AF;
 80013ac:	2305      	movs	r3, #5
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_GPIO_Init(SPIx_NSS_GPIO_PORT, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <HAL_SPI_MspInit+0x138>)
 80013b8:	f7ff fd2e 	bl	8000e18 <HAL_GPIO_Init>

	/* SPI NSS Software GPIO pin configuration  */
	GPIO_InitStruct.Pin = SPIx_NSS_SOFT_PIN;
 80013bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30

	HAL_GPIO_Init(SPIx_NSS_SOFT_GPIO_PORT, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <HAL_SPI_MspInit+0x13c>)
 80013d2:	f7ff fd21 	bl	8000e18 <HAL_GPIO_Init>

}
 80013d6:	bf00      	nop
 80013d8:	3738      	adds	r7, #56	; 0x38
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020c00 	.word	0x40020c00

080013ec <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_PWREx_EnableOverDrive+0x90>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <HAL_PWREx_EnableOverDrive+0x90>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_PWREx_EnableOverDrive+0x90>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_PWREx_EnableOverDrive+0x94>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001428:	f7ff fbb4 	bl	8000b94 <HAL_GetTick>
 800142c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800142e:	e009      	b.n	8001444 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001430:	f7ff fbb0 	bl	8000b94 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800143e:	d901      	bls.n	8001444 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e01f      	b.n	8001484 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_PWREx_EnableOverDrive+0x98>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001450:	d1ee      	bne.n	8001430 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001458:	f7ff fb9c 	bl	8000b94 <HAL_GetTick>
 800145c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800145e:	e009      	b.n	8001474 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001460:	f7ff fb98 	bl	8000b94 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800146e:	d901      	bls.n	8001474 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e007      	b.n	8001484 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <HAL_PWREx_EnableOverDrive+0x98>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001480:	d1ee      	bne.n	8001460 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	420e0040 	.word	0x420e0040
 8001494:	40007000 	.word	0x40007000
 8001498:	420e0044 	.word	0x420e0044

0800149c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e264      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d075      	beq.n	80015a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ba:	4ba3      	ldr	r3, [pc, #652]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d00c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c6:	4ba0      	ldr	r3, [pc, #640]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d112      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d2:	4b9d      	ldr	r3, [pc, #628]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014de:	d10b      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	4b99      	ldr	r3, [pc, #612]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d05b      	beq.n	80015a4 <HAL_RCC_OscConfig+0x108>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d157      	bne.n	80015a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e23f      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d106      	bne.n	8001510 <HAL_RCC_OscConfig+0x74>
 8001502:	4b91      	ldr	r3, [pc, #580]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a90      	ldr	r2, [pc, #576]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e01d      	b.n	800154c <HAL_RCC_OscConfig+0xb0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x98>
 800151a:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a8a      	ldr	r2, [pc, #552]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a87      	ldr	r2, [pc, #540]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0xb0>
 8001534:	4b84      	ldr	r3, [pc, #528]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a83      	ldr	r2, [pc, #524]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 800153a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a80      	ldr	r2, [pc, #512]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fb1e 	bl	8000b94 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fb1a 	bl	8000b94 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e204      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0xc0>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fb0a 	bl	8000b94 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fb06 	bl	8000b94 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1f0      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0xe8>
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d063      	beq.n	800167a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b2:	4b65      	ldr	r3, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015be:	4b62      	ldr	r3, [pc, #392]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d11c      	bne.n	8001604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d116      	bne.n	8001604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	4b5c      	ldr	r3, [pc, #368]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x152>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e1c4      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b56      	ldr	r3, [pc, #344]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4952      	ldr	r1, [pc, #328]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	e03a      	b.n	800167a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d020      	beq.n	800164e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800160c:	4b4f      	ldr	r3, [pc, #316]	; (800174c <HAL_RCC_OscConfig+0x2b0>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fabf 	bl	8000b94 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fabb 	bl	8000b94 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1a5      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b43      	ldr	r3, [pc, #268]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4940      	ldr	r1, [pc, #256]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
 800164c:	e015      	b.n	800167a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_RCC_OscConfig+0x2b0>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fa9e 	bl	8000b94 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165c:	f7ff fa9a 	bl	8000b94 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e184      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d030      	beq.n	80016e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d016      	beq.n	80016bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168e:	4b30      	ldr	r3, [pc, #192]	; (8001750 <HAL_RCC_OscConfig+0x2b4>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001694:	f7ff fa7e 	bl	8000b94 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fa7a 	bl	8000b94 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e164      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x200>
 80016ba:	e015      	b.n	80016e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_RCC_OscConfig+0x2b4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fa67 	bl	8000b94 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff fa63 	bl	8000b94 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e14d      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80016de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a0 	beq.w	8001836 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10f      	bne.n	8001726 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_OscConfig+0x2b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d121      	bne.n	8001776 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_RCC_OscConfig+0x2b8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <HAL_RCC_OscConfig+0x2b8>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7ff fa29 	bl	8000b94 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e011      	b.n	800176a <HAL_RCC_OscConfig+0x2ce>
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	42470000 	.word	0x42470000
 8001750:	42470e80 	.word	0x42470e80
 8001754:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7ff fa1c 	bl	8000b94 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e106      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b85      	ldr	r3, [pc, #532]	; (8001980 <HAL_RCC_OscConfig+0x4e4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x2f0>
 800177e:	4b81      	ldr	r3, [pc, #516]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a80      	ldr	r2, [pc, #512]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
 800178a:	e01c      	b.n	80017c6 <HAL_RCC_OscConfig+0x32a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d10c      	bne.n	80017ae <HAL_RCC_OscConfig+0x312>
 8001794:	4b7b      	ldr	r3, [pc, #492]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a7a      	ldr	r2, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	4b78      	ldr	r3, [pc, #480]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a77      	ldr	r2, [pc, #476]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
 80017ac:	e00b      	b.n	80017c6 <HAL_RCC_OscConfig+0x32a>
 80017ae:	4b75      	ldr	r3, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a74      	ldr	r2, [pc, #464]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a71      	ldr	r2, [pc, #452]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d015      	beq.n	80017fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff f9e1 	bl	8000b94 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff f9dd 	bl	8000b94 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e0c5      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	4b65      	ldr	r3, [pc, #404]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ee      	beq.n	80017d6 <HAL_RCC_OscConfig+0x33a>
 80017f8:	e014      	b.n	8001824 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff f9cb 	bl	8000b94 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff f9c7 	bl	8000b94 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0af      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ee      	bne.n	8001802 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d105      	bne.n	8001836 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182a:	4b56      	ldr	r3, [pc, #344]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a55      	ldr	r2, [pc, #340]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 8001830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 809b 	beq.w	8001976 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001840:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d05c      	beq.n	8001906 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d141      	bne.n	80018d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <HAL_RCC_OscConfig+0x4ec>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff f99b 	bl	8000b94 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001862:	f7ff f997 	bl	8000b94 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e081      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001874:	4b43      	ldr	r3, [pc, #268]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	019b      	lsls	r3, r3, #6
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	085b      	lsrs	r3, r3, #1
 8001898:	3b01      	subs	r3, #1
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	061b      	lsls	r3, r3, #24
 80018a4:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_RCC_OscConfig+0x4ec>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff f970 	bl	8000b94 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff f96c 	bl	8000b94 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e056      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x41c>
 80018d6:	e04e      	b.n	8001976 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_RCC_OscConfig+0x4ec>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff f959 	bl	8000b94 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff f955 	bl	8000b94 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e03f      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x44a>
 8001904:	e037      	b.n	8001976 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e032      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <HAL_RCC_OscConfig+0x4e8>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d028      	beq.n	8001972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d121      	bne.n	8001972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d11a      	bne.n	8001972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001942:	4013      	ands	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001948:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194a:	4293      	cmp	r3, r2
 800194c:	d111      	bne.n	8001972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	3b01      	subs	r3, #1
 800195c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d107      	bne.n	8001972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40007000 	.word	0x40007000
 8001984:	40023800 	.word	0x40023800
 8001988:	42470060 	.word	0x42470060

0800198c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0cc      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d90c      	bls.n	80019c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0b8      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	494d      	ldr	r1, [pc, #308]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d044      	beq.n	8001aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d119      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e07f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e06f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e067      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 0203 	bic.w	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4934      	ldr	r1, [pc, #208]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a7c:	f7ff f88a 	bl	8000b94 <HAL_GetTick>
 8001a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7ff f886 	bl	8000b94 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e04f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 020c 	and.w	r2, r3, #12
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1eb      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d20c      	bcs.n	8001ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e032      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4916      	ldr	r1, [pc, #88]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	490e      	ldr	r1, [pc, #56]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b12:	f000 f821 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	490a      	ldr	r1, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	5ccb      	ldrb	r3, [r1, r3]
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe ffea 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	080033e4 	.word	0x080033e4
 8001b50:	2000002c 	.word	0x2000002c
 8001b54:	20000030 	.word	0x20000030

08001b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b70:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d00d      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x40>
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	f200 80bd 	bhi.w	8001cfc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x34>
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d003      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8a:	e0b7      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b8e:	60bb      	str	r3, [r7, #8]
       break;
 8001b90:	e0b7      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b92:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b94:	60bb      	str	r3, [r7, #8]
      break;
 8001b96:	e0b4      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b98:	4b5d      	ldr	r3, [pc, #372]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba2:	4b5b      	ldr	r3, [pc, #364]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d04d      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bae:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	099b      	lsrs	r3, r3, #6
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bbe:	f04f 0100 	mov.w	r1, #0
 8001bc2:	ea02 0800 	and.w	r8, r2, r0
 8001bc6:	ea03 0901 	and.w	r9, r3, r1
 8001bca:	4640      	mov	r0, r8
 8001bcc:	4649      	mov	r1, r9
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	014b      	lsls	r3, r1, #5
 8001bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bdc:	0142      	lsls	r2, r0, #5
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	ebb0 0008 	subs.w	r0, r0, r8
 8001be6:	eb61 0109 	sbc.w	r1, r1, r9
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	018b      	lsls	r3, r1, #6
 8001bf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bf8:	0182      	lsls	r2, r0, #6
 8001bfa:	1a12      	subs	r2, r2, r0
 8001bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8001c00:	f04f 0000 	mov.w	r0, #0
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	00d9      	lsls	r1, r3, #3
 8001c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c0e:	00d0      	lsls	r0, r2, #3
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	eb12 0208 	adds.w	r2, r2, r8
 8001c18:	eb43 0309 	adc.w	r3, r3, r9
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	0259      	lsls	r1, r3, #9
 8001c26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c2a:	0250      	lsls	r0, r2, #9
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	461a      	mov	r2, r3
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f7fe fade 	bl	80001fc <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e04a      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	461a      	mov	r2, r3
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	ea02 0400 	and.w	r4, r2, r0
 8001c62:	ea03 0501 	and.w	r5, r3, r1
 8001c66:	4620      	mov	r0, r4
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	014b      	lsls	r3, r1, #5
 8001c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c78:	0142      	lsls	r2, r0, #5
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	1b00      	subs	r0, r0, r4
 8001c80:	eb61 0105 	sbc.w	r1, r1, r5
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	018b      	lsls	r3, r1, #6
 8001c8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c92:	0182      	lsls	r2, r0, #6
 8001c94:	1a12      	subs	r2, r2, r0
 8001c96:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9a:	f04f 0000 	mov.w	r0, #0
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	00d9      	lsls	r1, r3, #3
 8001ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ca8:	00d0      	lsls	r0, r2, #3
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	1912      	adds	r2, r2, r4
 8001cb0:	eb45 0303 	adc.w	r3, r5, r3
 8001cb4:	f04f 0000 	mov.w	r0, #0
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	0299      	lsls	r1, r3, #10
 8001cbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cc2:	0290      	lsls	r0, r2, #10
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	f7fe fa92 	bl	80001fc <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	3301      	adds	r3, #1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	60bb      	str	r3, [r7, #8]
      break;
 8001cfa:	e002      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cfe:	60bb      	str	r3, [r7, #8]
      break;
 8001d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d02:	68bb      	ldr	r3, [r7, #8]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	007a1200 	.word	0x007a1200

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2000002c 	.word	0x2000002c

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	080033f4 	.word	0x080033f4

08001d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d60:	f7ff ffdc 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0b5b      	lsrs	r3, r3, #13
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4903      	ldr	r1, [pc, #12]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	080033f4 	.word	0x080033f4

08001d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e083      	b.n	8001e9e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d108      	bne.n	8001db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001da6:	d009      	beq.n	8001dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
 8001dae:	e005      	b.n	8001dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fa6b 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	ea42 0103 	orr.w	r1, r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	0c1b      	lsrs	r3, r3, #16
 8001e54:	f003 0104 	and.w	r1, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f003 0210 	and.w	r2, r3, #16
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e70:	d105      	bne.n	8001e7e <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b088      	sub	sp, #32
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_SPI_Transmit+0x22>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e148      	b.n	800215a <HAL_SPI_Transmit+0x2b4>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ed0:	f7fe fe60 	bl	8000b94 <HAL_GetTick>
 8001ed4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d002      	beq.n	8001eec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eea:	e12d      	b.n	8002148 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SPI_Transmit+0x52>
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001efc:	e124      	b.n	8002148 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	88fa      	ldrh	r2, [r7, #6]
 8001f1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f44:	d10f      	bne.n	8001f66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f64:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f6e:	d10f      	bne.n	8001f90 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f8e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d007      	beq.n	8001fae <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb6:	d14b      	bne.n	8002050 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_SPI_Transmit+0x120>
 8001fc0:	8afb      	ldrh	r3, [r7, #22]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d13e      	bne.n	8002044 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	881a      	ldrh	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	1c9a      	adds	r2, r3, #2
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fea:	e02b      	b.n	8002044 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d112      	bne.n	8002020 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	1c9a      	adds	r2, r3, #2
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	86da      	strh	r2, [r3, #54]	; 0x36
 800201e:	e011      	b.n	8002044 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002020:	f7fe fdb8 	bl	8000b94 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d803      	bhi.n	8002038 <HAL_SPI_Transmit+0x192>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d102      	bne.n	800203e <HAL_SPI_Transmit+0x198>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002042:	e081      	b.n	8002148 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ce      	bne.n	8001fec <HAL_SPI_Transmit+0x146>
 800204e:	e04c      	b.n	80020ea <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_SPI_Transmit+0x1b8>
 8002058:	8afb      	ldrh	r3, [r7, #22]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d140      	bne.n	80020e0 <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	330c      	adds	r3, #12
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002084:	e02c      	b.n	80020e0 <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d113      	bne.n	80020bc <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80020ba:	e011      	b.n	80020e0 <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020bc:	f7fe fd6a 	bl	8000b94 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d803      	bhi.n	80020d4 <HAL_SPI_Transmit+0x22e>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d2:	d102      	bne.n	80020da <HAL_SPI_Transmit+0x234>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020de:	e033      	b.n	8002148 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1cd      	bne.n	8002086 <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f2:	d107      	bne.n	8002104 <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002102:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	6839      	ldr	r1, [r7, #0]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fcb5 	bl	8002a78 <SPI_EndRxTxTransaction>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	77fb      	strb	r3, [r7, #31]
 8002144:	e000      	b.n	8002148 <HAL_SPI_Transmit+0x2a2>
  }

error:
 8002146:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002158:	7ffb      	ldrb	r3, [r7, #31]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b08a      	sub	sp, #40	; 0x28
 8002166:	af02      	add	r7, sp, #8
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002182:	d112      	bne.n	80021aa <HAL_SPI_Receive+0x48>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10e      	bne.n	80021aa <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2204      	movs	r2, #4
 8002190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	4613      	mov	r3, r2
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f969 	bl	8002478 <HAL_SPI_TransmitReceive>
 80021a6:	4603      	mov	r3, r0
 80021a8:	e162      	b.n	8002470 <HAL_SPI_Receive+0x30e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_SPI_Receive+0x56>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e15b      	b.n	8002470 <HAL_SPI_Receive+0x30e>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021c0:	f7fe fce8 	bl	8000b94 <HAL_GetTick>
 80021c4:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d002      	beq.n	80021d8 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021d6:	e142      	b.n	800245e <HAL_SPI_Receive+0x2fc>
  }

  if ((pData == NULL) || (Size == 0U))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Receive+0x82>
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021e8:	e139      	b.n	800245e <HAL_SPI_Receive+0x2fc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2204      	movs	r2, #4
 80021ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002230:	d116      	bne.n	8002260 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002250:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002268:	d10f      	bne.n	800228a <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d007      	beq.n	80022a8 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d162      	bne.n	8002376 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022b0:	e02e      	b.n	8002310 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d115      	bne.n	80022ec <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f103 020c 	add.w	r2, r3, #12
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ea:	e011      	b.n	8002310 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ec:	f7fe fc52 	bl	8000b94 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d803      	bhi.n	8002304 <HAL_SPI_Receive+0x1a2>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d102      	bne.n	800230a <HAL_SPI_Receive+0x1a8>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_SPI_Receive+0x1ae>
        {
          errorcode = HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800230e:	e0a6      	b.n	800245e <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1cb      	bne.n	80022b2 <HAL_SPI_Receive+0x150>
 800231a:	e031      	b.n	8002380 <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d113      	bne.n	8002352 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	b292      	uxth	r2, r2
 8002336:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	1c9a      	adds	r2, r3, #2
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002350:	e011      	b.n	8002376 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002352:	f7fe fc1f 	bl	8000b94 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d803      	bhi.n	800236a <HAL_SPI_Receive+0x208>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d102      	bne.n	8002370 <HAL_SPI_Receive+0x20e>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002374:	e073      	b.n	800245e <HAL_SPI_Receive+0x2fc>
    while (hspi->RxXferCount > 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1cd      	bne.n	800231c <HAL_SPI_Receive+0x1ba>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002388:	d144      	bne.n	8002414 <HAL_SPI_Receive+0x2b2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002398:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	2101      	movs	r1, #1
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fa79 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_SPI_Receive+0x254>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	77fb      	strb	r3, [r7, #31]
      goto error;
 80023b4:	e053      	b.n	800245e <HAL_SPI_Receive+0x2fc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023be:	d107      	bne.n	80023d0 <HAL_SPI_Receive+0x26e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	b292      	uxth	r2, r2
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	e008      	b.n	80023e2 <HAL_SPI_Receive+0x280>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f103 020c 	add.w	r2, r3, #12
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	2101      	movs	r1, #1
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fa55 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_SPI_Receive+0x2a8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f043 0202 	orr.w	r2, r3, #2
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	77fb      	strb	r3, [r7, #31]
      goto error;
 8002408:	e029      	b.n	800245e <HAL_SPI_Receive+0x2fc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8002412:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	6839      	ldr	r1, [r7, #0]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fac7 	bl	80029ac <SPI_EndRxTransaction>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_SPI_Receive+0x2c8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b10      	cmp	r3, #16
 8002436:	d10a      	bne.n	800244e <HAL_SPI_Receive+0x2ec>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 0202 	orr.w	r2, r3, #2
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800244c:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_SPI_Receive+0x2fa>
  {
    errorcode = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	77fb      	strb	r3, [r7, #31]
 800245a:	e000      	b.n	800245e <HAL_SPI_Receive+0x2fc>
  }

error :
 800245c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800246e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08e      	sub	sp, #56	; 0x38
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800248a:	2301      	movs	r3, #1
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_SPI_TransmitReceive+0x2a>
 800249e:	2302      	movs	r3, #2
 80024a0:	e1f8      	b.n	8002894 <HAL_SPI_TransmitReceive+0x41c>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024aa:	f7fe fb73 	bl	8000b94 <HAL_GetTick>
 80024ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d00f      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x74>
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d2:	d107      	bne.n	80024e4 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <HAL_SPI_TransmitReceive+0x6c>
 80024dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d003      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
 80024e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024ea:	e1c9      	b.n	8002880 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x86>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x86>
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002504:	e1bc      	b.n	8002880 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b04      	cmp	r3, #4
 8002510:	d003      	beq.n	800251a <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2205      	movs	r2, #5
 8002516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	887a      	ldrh	r2, [r7, #2]
 800252a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002558:	d10f      	bne.n	800257a <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002578:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d007      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a0:	f040 808b 	bne.w	80026ba <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_SPI_TransmitReceive+0x13a>
 80025ac:	8b7b      	ldrh	r3, [r7, #26]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d178      	bne.n	80026a4 <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	881a      	ldrh	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	1c9a      	adds	r2, r3, #2
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025d6:	e065      	b.n	80026a4 <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d12d      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x1ca>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d028      	beq.n	8002642 <HAL_SPI_TransmitReceive+0x1ca>
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d125      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	881a      	ldrh	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	1c9a      	adds	r2, r3, #2
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10c      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x1ca>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002630:	d107      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002640:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d119      	bne.n	8002684 <HAL_SPI_TransmitReceive+0x20c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d014      	beq.n	8002684 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	b292      	uxth	r2, r2
 8002666:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002680:	2301      	movs	r3, #1
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002684:	f7fe fa86 	bl	8000b94 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002690:	429a      	cmp	r2, r3
 8002692:	d807      	bhi.n	80026a4 <HAL_SPI_TransmitReceive+0x22c>
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d003      	beq.n	80026a4 <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026a2:	e0ed      	b.n	8002880 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d194      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x160>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d18f      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x160>
 80026b8:	e08e      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0x250>
 80026c2:	8b7b      	ldrh	r3, [r7, #26]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d17d      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	330c      	adds	r3, #12
 80026d2:	7812      	ldrb	r2, [r2, #0]
 80026d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ee:	e069      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d12e      	bne.n	800275c <HAL_SPI_TransmitReceive+0x2e4>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d029      	beq.n	800275c <HAL_SPI_TransmitReceive+0x2e4>
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d126      	bne.n	800275c <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10c      	bne.n	800275c <HAL_SPI_TransmitReceive+0x2e4>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274a:	d107      	bne.n	800275c <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800275a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d119      	bne.n	800279e <HAL_SPI_TransmitReceive+0x326>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d014      	beq.n	800279e <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800279a:	2301      	movs	r3, #1
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800279e:	f7fe f9f9 	bl	8000b94 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d803      	bhi.n	80027b6 <HAL_SPI_TransmitReceive+0x33e>
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d102      	bne.n	80027bc <HAL_SPI_TransmitReceive+0x344>
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d103      	bne.n	80027c4 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027c2:	e05d      	b.n	8002880 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d190      	bne.n	80026f0 <HAL_SPI_TransmitReceive+0x278>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d18b      	bne.n	80026f0 <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e0:	d119      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	2201      	movs	r2, #1
 80027ea:	2101      	movs	r1, #1
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f855 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f043 0202 	orr.w	r2, r3, #2
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 800280a:	e039      	b.n	8002880 <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8002814:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b10      	cmp	r3, #16
 8002822:	d10d      	bne.n	8002840 <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0202 	orr.w	r2, r3, #2
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002838:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f917 	bl	8002a78 <SPI_EndRxTxTransaction>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800285c:	e010      	b.n	8002880 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10b      	bne.n	800287e <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	e000      	b.n	8002880 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 800287e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002890:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002894:	4618      	mov	r0, r3
 8002896:	3730      	adds	r7, #48	; 0x30
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028ac:	f7fe f972 	bl	8000b94 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028bc:	f7fe f96a 	bl	8000b94 <HAL_GetTick>
 80028c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	0d1b      	lsrs	r3, r3, #20
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d2:	e054      	b.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d050      	beq.n	800297e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028dc:	f7fe f95a 	bl	8000b94 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d902      	bls.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d13d      	bne.n	800296e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d111      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002914:	d004      	beq.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291e:	d107      	bne.n	8002930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d10f      	bne.n	800295a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e017      	b.n	800299e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3b01      	subs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d19b      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000002c 	.word	0x2000002c

080029ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c0:	d111      	bne.n	80029e6 <SPI_EndRxTransaction+0x3a>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ca:	d004      	beq.n	80029d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d107      	bne.n	80029e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ee:	d12a      	bne.n	8002a46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f8:	d012      	beq.n	8002a20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff ff49 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02d      	beq.n	8002a6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e026      	b.n	8002a6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2101      	movs	r1, #1
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff ff36 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01a      	beq.n	8002a6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e013      	b.n	8002a6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2101      	movs	r1, #1
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ff23 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <SPI_EndRxTxTransaction+0x7c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <SPI_EndRxTxTransaction+0x80>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0d5b      	lsrs	r3, r3, #21
 8002a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa2:	d112      	bne.n	8002aca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2180      	movs	r1, #128	; 0x80
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7ff fef4 	bl	800289c <SPI_WaitFlagStateUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	f043 0220 	orr.w	r2, r3, #32
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e00f      	b.n	8002aea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d0f2      	beq.n	8002aca <SPI_EndRxTxTransaction+0x52>
 8002ae4:	e000      	b.n	8002ae8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ae6:	bf00      	nop
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000002c 	.word	0x2000002c
 8002af8:	165e9f81 	.word	0x165e9f81

08002afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e03f      	b.n	8002b8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe fb70 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2224      	movs	r2, #36	; 0x24
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f929 	bl	8002d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b08a      	sub	sp, #40	; 0x28
 8002b9a:	af02      	add	r7, sp, #8
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d17c      	bne.n	8002cb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_UART_Transmit+0x2c>
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e075      	b.n	8002cb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_UART_Transmit+0x3e>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e06e      	b.n	8002cb2 <HAL_UART_Transmit+0x11c>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2221      	movs	r2, #33	; 0x21
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bea:	f7fd ffd3 	bl	8000b94 <HAL_GetTick>
 8002bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	88fa      	ldrh	r2, [r7, #6]
 8002bfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c04:	d108      	bne.n	8002c18 <HAL_UART_Transmit+0x82>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d104      	bne.n	8002c18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	e003      	b.n	8002c20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c28:	e02a      	b.n	8002c80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f840 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e036      	b.n	8002cb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10b      	bne.n	8002c62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	e007      	b.n	8002c72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1cf      	bne.n	8002c2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2140      	movs	r1, #64	; 0x40
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f810 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e006      	b.n	8002cb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b090      	sub	sp, #64	; 0x40
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cca:	e050      	b.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d04c      	beq.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <UART_WaitOnFlagUntilTimeout+0x30>
 8002cda:	f7fd ff5b 	bl	8000b94 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d241      	bcs.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	330c      	adds	r3, #12
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d0a:	637a      	str	r2, [r7, #52]	; 0x34
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e5      	bne.n	8002cea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3314      	adds	r3, #20
 8002d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3314      	adds	r3, #20
 8002d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d3e:	623a      	str	r2, [r7, #32]
 8002d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e00f      	b.n	8002d8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4013      	ands	r3, r2
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d09f      	beq.n	8002ccc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3740      	adds	r7, #64	; 0x40
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9c:	b09f      	sub	sp, #124	; 0x7c
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	68d9      	ldr	r1, [r3, #12]
 8002db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	ea40 0301 	orr.w	r3, r0, r1
 8002db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ddc:	f021 010c 	bic.w	r1, r1, #12
 8002de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de6:	430b      	orrs	r3, r1
 8002de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	6999      	ldr	r1, [r3, #24]
 8002df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	ea40 0301 	orr.w	r3, r0, r1
 8002e00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4bc5      	ldr	r3, [pc, #788]	; (800311c <UART_SetConfig+0x384>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d004      	beq.n	8002e16 <UART_SetConfig+0x7e>
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4bc3      	ldr	r3, [pc, #780]	; (8003120 <UART_SetConfig+0x388>)
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d103      	bne.n	8002e1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e16:	f7fe ffa1 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8002e1a:	6778      	str	r0, [r7, #116]	; 0x74
 8002e1c:	e002      	b.n	8002e24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e1e:	f7fe ff89 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8002e22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2c:	f040 80b6 	bne.w	8002f9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	461c      	mov	r4, r3
 8002e34:	f04f 0500 	mov.w	r5, #0
 8002e38:	4622      	mov	r2, r4
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	6439      	str	r1, [r7, #64]	; 0x40
 8002e40:	415b      	adcs	r3, r3
 8002e42:	647b      	str	r3, [r7, #68]	; 0x44
 8002e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e48:	1912      	adds	r2, r2, r4
 8002e4a:	eb45 0303 	adc.w	r3, r5, r3
 8002e4e:	f04f 0000 	mov.w	r0, #0
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	00d9      	lsls	r1, r3, #3
 8002e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e5c:	00d0      	lsls	r0, r2, #3
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	1911      	adds	r1, r2, r4
 8002e64:	6639      	str	r1, [r7, #96]	; 0x60
 8002e66:	416b      	adcs	r3, r5
 8002e68:	667b      	str	r3, [r7, #100]	; 0x64
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e84:	f7fd f9ba 	bl	80001fc <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4ba5      	ldr	r3, [pc, #660]	; (8003124 <UART_SetConfig+0x38c>)
 8002e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	011e      	lsls	r6, r3, #4
 8002e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e98:	461c      	mov	r4, r3
 8002e9a:	f04f 0500 	mov.w	r5, #0
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	1891      	adds	r1, r2, r2
 8002ea4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ea6:	415b      	adcs	r3, r3
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002eae:	1912      	adds	r2, r2, r4
 8002eb0:	eb45 0303 	adc.w	r3, r5, r3
 8002eb4:	f04f 0000 	mov.w	r0, #0
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	00d9      	lsls	r1, r3, #3
 8002ebe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec2:	00d0      	lsls	r0, r2, #3
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	1911      	adds	r1, r2, r4
 8002eca:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ecc:	416b      	adcs	r3, r5
 8002ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	1891      	adds	r1, r2, r2
 8002edc:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ee6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002eea:	f7fd f987 	bl	80001fc <__aeabi_uldivmod>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <UART_SetConfig+0x38c>)
 8002ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	2164      	movs	r1, #100	; 0x64
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	3332      	adds	r3, #50	; 0x32
 8002f06:	4a87      	ldr	r2, [pc, #540]	; (8003124 <UART_SetConfig+0x38c>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f14:	441e      	add	r6, r3
 8002f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	1894      	adds	r4, r2, r2
 8002f24:	623c      	str	r4, [r7, #32]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f2e:	1812      	adds	r2, r2, r0
 8002f30:	eb41 0303 	adc.w	r3, r1, r3
 8002f34:	f04f 0400 	mov.w	r4, #0
 8002f38:	f04f 0500 	mov.w	r5, #0
 8002f3c:	00dd      	lsls	r5, r3, #3
 8002f3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f42:	00d4      	lsls	r4, r2, #3
 8002f44:	4622      	mov	r2, r4
 8002f46:	462b      	mov	r3, r5
 8002f48:	1814      	adds	r4, r2, r0
 8002f4a:	653c      	str	r4, [r7, #80]	; 0x50
 8002f4c:	414b      	adcs	r3, r1
 8002f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	461a      	mov	r2, r3
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	1891      	adds	r1, r2, r2
 8002f5c:	61b9      	str	r1, [r7, #24]
 8002f5e:	415b      	adcs	r3, r3
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f6a:	f7fd f947 	bl	80001fc <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4b6c      	ldr	r3, [pc, #432]	; (8003124 <UART_SetConfig+0x38c>)
 8002f74:	fba3 1302 	umull	r1, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	2164      	movs	r1, #100	; 0x64
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	3332      	adds	r3, #50	; 0x32
 8002f86:	4a67      	ldr	r2, [pc, #412]	; (8003124 <UART_SetConfig+0x38c>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	f003 0207 	and.w	r2, r3, #7
 8002f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4432      	add	r2, r6
 8002f98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f9a:	e0b9      	b.n	8003110 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9e:	461c      	mov	r4, r3
 8002fa0:	f04f 0500 	mov.w	r5, #0
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	1891      	adds	r1, r2, r2
 8002faa:	6139      	str	r1, [r7, #16]
 8002fac:	415b      	adcs	r3, r3
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fb4:	1912      	adds	r2, r2, r4
 8002fb6:	eb45 0303 	adc.w	r3, r5, r3
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	00d9      	lsls	r1, r3, #3
 8002fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fc8:	00d0      	lsls	r0, r2, #3
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	eb12 0804 	adds.w	r8, r2, r4
 8002fd2:	eb43 0905 	adc.w	r9, r3, r5
 8002fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	008b      	lsls	r3, r1, #2
 8002fea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fee:	0082      	lsls	r2, r0, #2
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	f7fd f902 	bl	80001fc <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4b49      	ldr	r3, [pc, #292]	; (8003124 <UART_SetConfig+0x38c>)
 8002ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	011e      	lsls	r6, r3, #4
 8003006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003008:	4618      	mov	r0, r3
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	1894      	adds	r4, r2, r2
 8003014:	60bc      	str	r4, [r7, #8]
 8003016:	415b      	adcs	r3, r3
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800301e:	1812      	adds	r2, r2, r0
 8003020:	eb41 0303 	adc.w	r3, r1, r3
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	f04f 0500 	mov.w	r5, #0
 800302c:	00dd      	lsls	r5, r3, #3
 800302e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003032:	00d4      	lsls	r4, r2, #3
 8003034:	4622      	mov	r2, r4
 8003036:	462b      	mov	r3, r5
 8003038:	1814      	adds	r4, r2, r0
 800303a:	64bc      	str	r4, [r7, #72]	; 0x48
 800303c:	414b      	adcs	r3, r1
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f04f 0100 	mov.w	r1, #0
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	008b      	lsls	r3, r1, #2
 8003054:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003058:	0082      	lsls	r2, r0, #2
 800305a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800305e:	f7fd f8cd 	bl	80001fc <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <UART_SetConfig+0x38c>)
 8003068:	fba3 1302 	umull	r1, r3, r3, r2
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	2164      	movs	r1, #100	; 0x64
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	3332      	adds	r3, #50	; 0x32
 800307a:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <UART_SetConfig+0x38c>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003086:	441e      	add	r6, r3
 8003088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308a:	4618      	mov	r0, r3
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	1894      	adds	r4, r2, r2
 8003096:	603c      	str	r4, [r7, #0]
 8003098:	415b      	adcs	r3, r3
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a0:	1812      	adds	r2, r2, r0
 80030a2:	eb41 0303 	adc.w	r3, r1, r3
 80030a6:	f04f 0400 	mov.w	r4, #0
 80030aa:	f04f 0500 	mov.w	r5, #0
 80030ae:	00dd      	lsls	r5, r3, #3
 80030b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030b4:	00d4      	lsls	r4, r2, #3
 80030b6:	4622      	mov	r2, r4
 80030b8:	462b      	mov	r3, r5
 80030ba:	eb12 0a00 	adds.w	sl, r2, r0
 80030be:	eb43 0b01 	adc.w	fp, r3, r1
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	008b      	lsls	r3, r1, #2
 80030d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030da:	0082      	lsls	r2, r0, #2
 80030dc:	4650      	mov	r0, sl
 80030de:	4659      	mov	r1, fp
 80030e0:	f7fd f88c 	bl	80001fc <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <UART_SetConfig+0x38c>)
 80030ea:	fba3 1302 	umull	r1, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2164      	movs	r1, #100	; 0x64
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	3332      	adds	r3, #50	; 0x32
 80030fc:	4a09      	ldr	r2, [pc, #36]	; (8003124 <UART_SetConfig+0x38c>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4432      	add	r2, r6
 800310e:	609a      	str	r2, [r3, #8]
}
 8003110:	bf00      	nop
 8003112:	377c      	adds	r7, #124	; 0x7c
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	40011000 	.word	0x40011000
 8003120:	40011400 	.word	0x40011400
 8003124:	51eb851f 	.word	0x51eb851f

08003128 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
	 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	HAL_Init();
 800312c:	f7fd fcd2 	bl	8000ad4 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003130:	f000 f826 	bl	8003180 <SystemClock_Config>

	/* Initialize BSP Led for LED2 and LED3*/
	BSP_LED_Init(LED2);
 8003134:	2001      	movs	r0, #1
 8003136:	f7fd fb93 	bl	8000860 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 800313a:	2002      	movs	r0, #2
 800313c:	f7fd fb90 	bl	8000860 <BSP_LED_Init>

	/* Initialize Debounce MEF */
	debounceFSM_init();
 8003140:	f7fd f9d8 	bl	80004f4 <debounceFSM_init>

	/* Initialize UART */
	if (!uartInit()) {
 8003144:	f7fd fb16 	bl	8000774 <uartInit>
 8003148:	4603      	mov	r3, r0
 800314a:	f083 0301 	eor.w	r3, r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <main+0x30>
		Error_Handler();
 8003154:	f000 f876 	bl	8003244 <Error_Handler>
	}

	static const char *INIT_MSG =
			"Welcome to ADS1293 SPI communication test:\n\r";
	uartSendString((uint8_t*) INIT_MSG);
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <main+0x54>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd fb65 	bl	800082c <uartSendString>

	if (!spiInit()) {
 8003162:	f7fd faa1 	bl	80006a8 <spiInit>
 8003166:	4603      	mov	r3, r0
 8003168:	f083 0301 	eor.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <main+0x4e>
		Error_Handler();
 8003172:	f000 f867 	bl	8003244 <Error_Handler>

	/* Infinite loop */
	while (1) {
		/* Rising and Falling messages will be sent from API_Debounce.c in order to detect the flanks*/
		/* Handle button states */
		debounceFSM_update();
 8003176:	f7fd f9cf 	bl	8000518 <debounceFSM_update>
 800317a:	e7fc      	b.n	8003176 <main+0x4e>
 800317c:	20000038 	.word	0x20000038

08003180 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b094      	sub	sp, #80	; 0x50
 8003184:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4b2c      	ldr	r3, [pc, #176]	; (800323c <SystemClock_Config+0xbc>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a2b      	ldr	r2, [pc, #172]	; (800323c <SystemClock_Config+0xbc>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b29      	ldr	r3, [pc, #164]	; (800323c <SystemClock_Config+0xbc>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <SystemClock_Config+0xc0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a25      	ldr	r2, [pc, #148]	; (8003240 <SystemClock_Config+0xc0>)
 80031ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <SystemClock_Config+0xc0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031be:	2301      	movs	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80031c2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80031c6:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031c8:	2302      	movs	r3, #2
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80031d2:	2308      	movs	r3, #8
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80031d6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031dc:	2302      	movs	r3, #2
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80031e0:	2307      	movs	r3, #7
 80031e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe f957 	bl	800149c <HAL_RCC_OscConfig>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 80031f4:	f000 f826 	bl	8003244 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80031f8:	f7fe f900 	bl	80013fc <HAL_PWREx_EnableOverDrive>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 8003202:	f000 f81f 	bl	8003244 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8003206:	230f      	movs	r3, #15
 8003208:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800320a:	2302      	movs	r3, #2
 800320c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800320e:	2300      	movs	r3, #0
 8003210:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003212:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800321c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800321e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003222:	2105      	movs	r1, #5
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fbb1 	bl	800198c <HAL_RCC_ClockConfig>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 8003230:	f000 f808 	bl	8003244 <Error_Handler>
	}
}
 8003234:	bf00      	nop
 8003236:	3750      	adds	r7, #80	; 0x50
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	40007000 	.word	0x40007000

08003244 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	while (1) {
		BSP_LED_Toggle(LED2);
 8003248:	2001      	movs	r0, #1
 800324a:	f7fd fb59 	bl	8000900 <BSP_LED_Toggle>
		HAL_Delay(500);
 800324e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003252:	f7fd fcab 	bl	8000bac <HAL_Delay>
		BSP_LED_Toggle(LED2);
 8003256:	e7f7      	b.n	8003248 <Error_Handler+0x4>

08003258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003290 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800325c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800325e:	e003      	b.n	8003268 <LoopCopyDataInit>

08003260 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003262:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003264:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003266:	3104      	adds	r1, #4

08003268 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003268:	480b      	ldr	r0, [pc, #44]	; (8003298 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800326c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800326e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003270:	d3f6      	bcc.n	8003260 <CopyDataInit>
  ldr  r2, =_sbss
 8003272:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003274:	e002      	b.n	800327c <LoopFillZerobss>

08003276 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003276:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003278:	f842 3b04 	str.w	r3, [r2], #4

0800327c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800327e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003280:	d3f9      	bcc.n	8003276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003282:	f7fd fbc3 	bl	8000a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003286:	f000 f811 	bl	80032ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800328a:	f7ff ff4d 	bl	8003128 <main>
  bx  lr    
 800328e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003290:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003294:	0800340c 	.word	0x0800340c
  ldr  r0, =_sdata
 8003298:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800329c:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 80032a0:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 80032a4:	20000108 	.word	0x20000108

080032a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032a8:	e7fe      	b.n	80032a8 <ADC_IRQHandler>
	...

080032ac <__libc_init_array>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	4d0d      	ldr	r5, [pc, #52]	; (80032e4 <__libc_init_array+0x38>)
 80032b0:	4c0d      	ldr	r4, [pc, #52]	; (80032e8 <__libc_init_array+0x3c>)
 80032b2:	1b64      	subs	r4, r4, r5
 80032b4:	10a4      	asrs	r4, r4, #2
 80032b6:	2600      	movs	r6, #0
 80032b8:	42a6      	cmp	r6, r4
 80032ba:	d109      	bne.n	80032d0 <__libc_init_array+0x24>
 80032bc:	4d0b      	ldr	r5, [pc, #44]	; (80032ec <__libc_init_array+0x40>)
 80032be:	4c0c      	ldr	r4, [pc, #48]	; (80032f0 <__libc_init_array+0x44>)
 80032c0:	f000 f818 	bl	80032f4 <_init>
 80032c4:	1b64      	subs	r4, r4, r5
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	2600      	movs	r6, #0
 80032ca:	42a6      	cmp	r6, r4
 80032cc:	d105      	bne.n	80032da <__libc_init_array+0x2e>
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d4:	4798      	blx	r3
 80032d6:	3601      	adds	r6, #1
 80032d8:	e7ee      	b.n	80032b8 <__libc_init_array+0xc>
 80032da:	f855 3b04 	ldr.w	r3, [r5], #4
 80032de:	4798      	blx	r3
 80032e0:	3601      	adds	r6, #1
 80032e2:	e7f2      	b.n	80032ca <__libc_init_array+0x1e>
 80032e4:	08003404 	.word	0x08003404
 80032e8:	08003404 	.word	0x08003404
 80032ec:	08003404 	.word	0x08003404
 80032f0:	08003408 	.word	0x08003408

080032f4 <_init>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

08003300 <_fini>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr
