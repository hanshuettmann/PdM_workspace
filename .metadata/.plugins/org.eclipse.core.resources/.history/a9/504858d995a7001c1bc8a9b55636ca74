#include <API_Delay.h>

/**
 * @brief  Initialize delay handler
 * @param  delay: pointer to a delay_t structure that contains
 *         the corresponding values to use the delay.
 * @param  duration: Timeout value
 */
void delayInit(delay_t *delay, tick_t duration) {
	//Timeout and pointer validation
	if (delay == 0 || duration < 0) {
		Error_Handler();
	}

	delay->startTime = HAL_GetTick();
	delay->duration = duration;
	delay->running = false;
}

/**
 * @brief  Reads if delay is running or not
 * @param  delay: pointer to a delay_t structure that contains
 *         the corresponding values to use the delay.
 * @retval Boolean that indicates the state of the delay. True for delay running and false indicating
 * 		duration time has elapsed
 */
bool_t delayRead(delay_t *delay) {
	//Pointer validation
	if (delay == 0) {
		Error_Handler();
	}

	if (!delay->running) {
		delay->startTime = HAL_GetTick();
		delay->running = true;
	}

	if (HAL_GetTick() - delay->startTime > delay->duration) {
		delay->running = false;
		return true;
	} else {
		return false;
	}
}

/**
 * @brief  Sets delay duration
 * @param  delay: pointer to a delay_t structure that contains
 *         the corresponding values to use the delay.
 * @param  duration: Timeout value
 */
void delayWrite(delay_t *delay, tick_t duration) {
	//Timeout and pointer validation
	if (delay == 0 || duration < 0) {
		Error_Handler();
	}

	delay->duration = duration;
}
