/**
 ******************************************************************************
 * @file    Drivers/API/Src/API_Uart.c
 * @author  Patricio Hans HÃ¼ttmann
 * @brief   This file provides firmware functions to manage UART peripheral
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* Includes ------------------------------------------------------------------*/
#include <API_Uart.h>
#include <stdio.h>
#include <string.h>

/* Definition for USARTx settings */
#define UART_BAUDRATE 9600
#define UART_WORDLENGTH UART_WORDLENGTH_8B
#define UART_STOPBITS UART_STOPBITS_1
#define UART_PARITY UART_PARITY_ODD
#define UART_FLOWCONTROL UART_HWCONTROL_NONE
#define UART_MODE UART_MODE_TX_RX
#define UART_OVERSAMPLING UART_OVERSAMPLING_16

/* Settings messages */
static const char *UART_BAUDRATE_MSG = "Baudrate: 9600\n\r";
static const char *UART_WORDLENGTH_MSG = "UART Instance: USART3\n\r";
static const char *UART_STOPBITS_MSG = "UART BaudRate: 9600\n\r";
static const char *UART_PARITY_MSG = "UART WordLength: UART_WORDLENGTH_8B\n\r";
static const char *UART_FLOWCONTROL_MSG = "UART StopBits: UART_STOPBITS_1\n\r";
static const char *UART_MODE_MSG = "UART Parity: UART_PARITY_ODD\n\r";
static const char *UART_OVERSAMPLING_MSG = "UART HwFlowCtl: UART_HWCONTROL_NONE\n\r";

/* UART handler declaration */
static UART_HandleTypeDef UartHandle;

/* Private function prototypes -----------------------------------------------*/

/**
 * @brief  Initialize UART peripheral
 * @param  none
 * @retval bool Init process status
 */
bool_t uartInit(void) {

	/*##-1- Configure the UART peripheral ######################################*/
	/* Put the USART peripheral in the Asynchronous mode (UART Mode) */
	UartHandle.Instance = USARTx;

	UartHandle.Init.BaudRate = UART_BAUDRATE;
	UartHandle.Init.WordLength = UART_WORDLENGTH;
	UartHandle.Init.StopBits = UART_STOPBITS;
	UartHandle.Init.Parity = UART_PARITY;
	UartHandle.Init.HwFlowCtl = UART_FLOWCONTROL;
	UartHandle.Init.Mode = UART_MODE;
	UartHandle.Init.OverSampling = UART_OVERSAMPLING;

	/* Init peripheral */
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
		/* Initialization Error */
		return false;
	} else {
		return true;
	}

}

/**
 * @brief  Send string to the console
 * @param  pstring pointer to the array to be sent to the console
 * @retval none
 */
void uartSendString(uint8_t *pstring) {
	/* Validates pstring parameter */
	if (pstring == NULL) {
		return;
	}

	/* Send pstring to the console */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) pstring,
			strlen((const char*) pstring), HAL_MAX_DELAY);
}

/**
 * @brief Send a finite number of characters to the console
 * @param pstring pointer to the array to be sent to the console
 * @param size amount of characters to send
 * @retval none
 */
void uartSendStringSize(uint8_t *pstring, uint16_t size) {
	/* Validates pstring and size parameters */
	if (pstring == NULL && size > 0) {
		return;
	}

	/* Send pstring to the console */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) pstring, size, HAL_MAX_DELAY);
}

/**
 * @brief  Send string to the console
 * @param  pstring Pointer to data buffer (u8 or u16 data elements).
 * @param  size  Amount of data elements (u8 or u16) to be received.
 * @retval none
 */
void uartReceiveStringSize(uint8_t *pstring, uint16_t size) {
	/* Validates pstring and size parameters */
	if (pstring == NULL && size > 0) {
		return;
	}

	/* Send pstring to the console */
	HAL_UART_Receive(&UartHandle, (uint8_t*) pstring, size, HAL_MAX_DELAY);
}

/*****************************END OF FILE**************************************/
