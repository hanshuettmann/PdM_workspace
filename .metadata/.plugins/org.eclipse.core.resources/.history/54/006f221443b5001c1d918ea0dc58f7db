/**
 ******************************************************************************
 * @file    Drivers/API/Src/API_Uart.c
 * @author  Patricio Hans HÃ¼ttmann
 * @brief   This file provides firmware functions to manage UART peripheral
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* Includes ------------------------------------------------------------------*/
#include <API_Uart.h>
#include <stdio.h>
#include <string.h>

#ifdef __GNUC__
/* With GCC, small printf (option LD Linker->Libraries->Small printf
   set to 'Yes') calls __io_putchar() */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

/* Definition for USARTx settings */
#define UART_BAUDRATE 9600
#define UART_WORDLENGTH UART_WORDLENGTH_8B
#define UART_STOPBITS UART_STOPBITS_1
#define UART_PARITY UART_PARITY_ODD
#define UART_FLOWCONTROL UART_HWCONTROL_NONE
#define UART_MODE UART_MODE_TX_RX
#define UART_OVERSAMPLING UART_OVERSAMPLING_16

/* UART handler declaration */
static UART_HandleTypeDef UartHandle;

/**
 * @brief  Initialize UART peripheral
 * @param  none
 * @retval bool Init process status
 */
bool_t uartInit(void) {

	/*##-1- Configure the UART peripheral ######################################*/
	/* Put the USART peripheral in the Asynchronous mode (UART Mode) */
	UartHandle.Instance = USARTx;

	UartHandle.Init.BaudRate = UART_BAUDRATE;
	UartHandle.Init.WordLength = UART_WORDLENGTH;
	UartHandle.Init.StopBits = UART_STOPBITS;
	UartHandle.Init.Parity = UART_PARITY;
	UartHandle.Init.HwFlowCtl = UART_FLOWCONTROL;
	UartHandle.Init.Mode = UART_MODE;
	UartHandle.Init.OverSampling = UART_OVERSAMPLING;

	/* Init peripheral */
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
		/* Initialization Error */
		return false;
	} else {
		return true;
	}


}

PUTCHAR_PROTOTYPE
{
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);

	return ch;
}
